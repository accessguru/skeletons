@inherits ComponentBase
@implements ISkeleton
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Spinner
@using Skeleton

@if (IsLoading && EnableSkeleton)
{
    <SkeletonGrid Height="500px"  />
}
else
{
    <SfGrid DataSource="@GridData" AllowPaging="true" Height="500px">
        <GridPageSettings PageSize="20"/>
        <GridColumns>
            <GridColumn Field=@nameof(OrdersDetails.OrderID) HeaderText="Order ID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
            <GridColumn Field=@nameof(OrdersDetails.CustomerID) HeaderText="Customer ID" Width="150"></GridColumn>
            <GridColumn Field=@nameof(OrdersDetails.OrderDate) HeaderText=" Order Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
            <GridColumn Field=@nameof(OrdersDetails.Freight) Format="C2" TextAlign="TextAlign.Right" Width="140"></GridColumn>
            <GridColumn Field=@nameof(OrdersDetails.ShippedDate) HeaderText="Shipped Date" Format="d" TextAlign="TextAlign.Right" Width="150"></GridColumn>
            <GridColumn Field=@nameof(OrdersDetails.ShipCity) HeaderText="Ship City" Width="150"></GridColumn>
        </GridColumns>
        <SfSpinner @bind-Visible="@IsBusy" Type="SpinnerType.Bootstrap5" Size="50" />
    </SfGrid>
}

@code {

    private int incValue = 0;

    public bool IsLoading { get; set; }

    public bool IsBusy { get; set; }

    [Parameter]
    public bool EnableSkeleton { get; set; }

    public List<OrdersDetails> GridData { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            IsLoading = true;
            await LoadData();
        }
    }

    public async Task LoadData()
    {
        IsBusy = true;
        StateHasChanged();
        await Task.Delay(3000);

        var data = new List<OrdersDetails>();

        incValue++;
        for (var x = incValue; x <= 100; x++)
        {
            data.Add(new OrdersDetails
            {
                OrderID = x,
                CustomerID = x + 1,
                Freight = x * 200 / .7,
                OrderDate = DateTime.Today,
                ShipCity = "Arcadia",
                ShippedDate = DateTime.Today.AddDays(x)
            });
        }

        GridData = data;
        IsBusy = false;
        IsLoading = false;
        StateHasChanged();
    }
}